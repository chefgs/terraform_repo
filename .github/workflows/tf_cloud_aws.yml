# This workflow will create AWS resource using TF Cloud 
# It is reusable workflow that can be called in other workflows

name: AWS Infra Creation Using in TF Cloud 

on:
  workflow_call:
    secrets:
        TF_API_TOKEN:
            required: true
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  tfcode_path: tfcloud_samples/amazon_ec2

jobs: 
  aws_tfc_job:
    name: Create AWS Infra Using TFC

    runs-on: ubuntu-latest

    steps:
    - name: Checkout tf code in runner environment
      uses: actions/checkout@v3.5.2

    # Configure Terraform cloud API token, since we are using Remote backend option of Terraform cloud in AWS code
    - name: Setup Terraform CLI
      uses: hashicorp/setup-terraform@v2.0.2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Add the AWS Creds as ENV variable in TF Cloud workspace, since the tf run happens in TF Cloud environment

    # Invoke the Terraform commands
    - name: Terraform init and validate
      run: |
        echo `pwd`
        echo "** Running Terraform Init**"
        terraform init
          
        echo "** Running Terraform Validate**"
        terraform validate
      working-directory: ${{ env.tfcode_path }}

    - name: Terraform Plan
      id: tfplan
      run: |
        echo "** Running Terraform Plan**"
        terraform plan
        # echo "::set-output name=plan_id::tfplan"
      working-directory: ${{ env.tfcode_path }}

    - name: Terraform Plan Output
      uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.0
      id: plan-output
      with:
        plan: ${{ steps.tfplan.outputs.plan_id }}
    
    - name: Reference Plan Output
      run: |
        echo "Plan status: ${{ steps.plan-output.outputs.plan_status }}"
        echo "Resources to Add: ${{ steps.plan-output.outputs.add }}"
        echo "Resources to Change: ${{ steps.plan-output.outputs.change }}"
        echo "Resources to Destroy: ${{ steps.plan-output.outputs.destroy }}"
    

  # Once the user verifies the Terraform Plan, the user can run the Terraform Apply and Destroy commands
  apply_terraform_plan:
      needs: aws_tfc_job
      if: github.event_name == 'workflow_dispatch'
      runs-on: ubuntu-latest
      steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2
      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Apply
        run: |
          echo "** Running Terraform Apply**"
          terraform apply -auto-approve
        working-directory: ${{ env.tfcode_path }}
  
      - name: Terraform Destroy
        run: |
          echo "** Running Terraform Destroy**"
          terraform destroy -auto-approve
        working-directory: ${{ env.tfcode_path }}
